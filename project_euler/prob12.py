"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from commons import factors
from threading import Thread

t = {1:1} # let's memoize.

def nthtrianglenumber(n):
	
	if t.has_key(n):
		return t[n]
	else:
		while not t.has_key(n):
			l = len(t)
			z = t[l]
			z += (l+1)
			t[l+1] = z
		return t[n]

def main1():
	n = 2
	x = nthtrianglenumber(n)
	f = len(factors(x))
	while f < 500:
		n *= 10
		x = nthtrianglenumber(n)
		f = len(factors(x))
		print n,x,f
	
	print n, x, f

m = (0,0)
def main2():
	for i in xrange(10000):
		f = len(factors(i))
		
		print i, len(factors(i))

def main3():
	

def main0():
	def odds():
		n = 1
		while len(factors(nthtrianglenumber(n))) < 500:
			n += 2
		print nthtrianglenumber(n)

	def evens():
		n = 0
		while len(factors(nthtrianglenumber(n))) < 500:
			n += 2
		print nthtrianglenumber(n)

	o = Thread(target=odds)
	e = Thread(target=evens)
	o.start()
	e.start()